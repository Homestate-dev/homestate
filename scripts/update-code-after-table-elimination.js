const fs = require('fs')
const path = require('path')

// Funci√≥n para leer archivos
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8')
  } catch (error) {
    console.log(`‚ö†Ô∏è  No se pudo leer ${filePath}: ${error.message}`)
    return null
  }
}

// Funci√≥n para escribir archivos
function writeFile(filePath, content) {
  try {
    fs.writeFileSync(filePath, content, 'utf8')
    return true
  } catch (error) {
    console.log(`‚ùå Error escribiendo ${filePath}: ${error.message}`)
    return false
  }
}

// Funci√≥n para verificar eliminaci√≥n del API de estad√≠sticas
function verifyStatsAPIRemoval() {
  console.log('üìä Verificando eliminaci√≥n del API de estad√≠sticas...')
  
  const statsFile = 'app/api/sales-rentals/stats/route.ts'
  const content = readFile(statsFile)
  
  if (!content) {
    console.log('   ‚úÖ API de estad√≠sticas eliminada correctamente')
    return true
  } else {
    console.log('   ‚ö†Ô∏è  El archivo de estad√≠sticas a√∫n existe, se recomienda eliminarlo manualmente')
    return false
  }
}

// Funci√≥n para actualizar el API de transacciones individuales
function updateTransactionAPI() {
  console.log('üîÑ Actualizando API de transacciones individuales...')
  
  const transactionFile = 'app/api/sales-rentals/transactions/[id]/route.ts'
  let content = readFile(transactionFile)
  
  if (!content) {
    console.log('   ‚ùå No se pudo leer el archivo de transacciones')
    return false
  }

  let hasChanges = false

  // Reemplazar todas las referencias a transacciones_ventas_arriendos
  const replacements = [
    {
      old: 'SELECT * FROM transacciones_ventas_arriendos WHERE id = $1',
      new: 'SELECT * FROM transacciones_departamentos WHERE id = $1'
    },
    {
      old: 'UPDATE transacciones_ventas_arriendos',
      new: 'UPDATE transacciones_departamentos'
    },
    {
      old: 'DELETE FROM transacciones_ventas_arriendos WHERE id = $1',
      new: 'DELETE FROM transacciones_departamentos WHERE id = $1'
    },
    {
      old: 'SELECT departamento_id, estado, tipo_transaccion FROM transacciones_ventas_arriendos WHERE id = $1',
      new: 'SELECT departamento_id, estado_actual, tipo_transaccion FROM transacciones_departamentos WHERE id = $1'
    }
  ]

  replacements.forEach(replacement => {
    if (content.includes(replacement.old)) {
      content = content.replace(replacement.old, replacement.new)
      hasChanges = true
      console.log(`   üìù Reemplazado: ${replacement.old.substring(0, 50)}...`)
    }
  })

  // Actualizar referencias a campos
  if (content.includes('transaction.estado ===')) {
    content = content.replace(/transaction\.estado ===/g, 'transaction.estado_actual ===')
    hasChanges = true
    console.log('   üìù Actualizada referencia a campo estado')
  }

  if (hasChanges) {
    if (writeFile(transactionFile, content)) {
      console.log('   ‚úÖ API de transacciones actualizada exitosamente')
      return true
    }
  } else {
    console.log('   ‚ÑπÔ∏è  El archivo ya est√° actualizado o no contiene referencias')
    return true
  }
  
  return false
}

// Funci√≥n para actualizar el API principal de transacciones
function updateMainTransactionAPI() {
  console.log('üîß Actualizando API principal de transacciones...')
  
  const mainTransactionFile = 'app/api/sales-rentals/transactions/route.ts'
  let content = readFile(mainTransactionFile)
  
  if (!content) {
    console.log('   ‚ùå No se pudo leer el archivo principal de transacciones')
    return false
  }

  let hasChanges = false

  // Remover l√≥gica de verificaci√≥n de tabla transacciones_ventas_arriendos
  const checkLogicPattern = /const hasTransaccionesVentasArriendos = await tableExists\('transacciones_ventas_arriendos'\)/g
  if (content.match(checkLogicPattern)) {
    // Comentar la l√≠nea en lugar de eliminarla para mantener el historial
    content = content.replace(checkLogicPattern, "// const hasTransaccionesVentasArriendos = await tableExists('transacciones_ventas_arriendos') // ELIMINADA")
    hasChanges = true
    console.log('   üìù Comentada verificaci√≥n de transacciones_ventas_arriendos')
  }

  // Actualizar condici√≥n de verificaci√≥n de tablas
  const oldCondition = 'if (!hasTransaccionesDepartamentos && !hasTransaccionesVentasArriendos)'
  const newCondition = 'if (!hasTransaccionesDepartamentos)'
  
  if (content.includes(oldCondition)) {
    content = content.replace(oldCondition, newCondition)
    hasChanges = true
    console.log('   üìù Simplificada condici√≥n de verificaci√≥n de tablas')
  }

  // Remover l√≥gica de selecci√≥n de tabla condicional
  const tableSelectionPattern = /const tableName = hasTransaccionesVentasArriendos \? 'transacciones_ventas_arriendos' : 'transacciones_departamentos'/g
  if (content.match(tableSelectionPattern)) {
    content = content.replace(tableSelectionPattern, "const tableName = 'transacciones_departamentos' // Usar siempre transacciones_departamentos")
    hasChanges = true
    console.log('   üìù Simplificada selecci√≥n de tabla')
  }

  // Remover INSERT condicional para transacciones_ventas_arriendos
  const insertPattern = /} else {\s*\/\/ Usar la tabla antigua\s*sql = `\s*INSERT INTO transacciones_ventas_arriendos[\s\S]*?queryParams = \[[\s\S]*?\]/g
  if (content.match(insertPattern)) {
    // Reemplazar con comentario
    content = content.replace(insertPattern, `} 
    // NOTA: C√≥digo para inserci√≥n en transacciones_ventas_arriendos eliminado
    // Solo se usa transacciones_departamentos ahora`)
    hasChanges = true
    console.log('   üìù Eliminada l√≥gica de inserci√≥n en transacciones_ventas_arriendos')
  }

  if (hasChanges) {
    if (writeFile(mainTransactionFile, content)) {
      console.log('   ‚úÖ API principal de transacciones actualizada exitosamente')
      return true
    }
  } else {
    console.log('   ‚ÑπÔ∏è  El archivo ya est√° actualizado')
    return true
  }
  
  return false
}

// Funci√≥n para crear archivo de migraci√≥n SQL complementario
function createMigrationSQL() {
  console.log('üìÑ Creando archivo de migraci√≥n SQL...')
  
  const migrationContent = `-- Migraci√≥n para actualizar referencias despu√©s de eliminar transacciones_ventas_arriendos
-- Fecha: ${new Date().toISOString().split('T')[0]}
-- Prop√≥sito: Limpiar cualquier referencia restante y optimizar esquema

-- 1. Verificar que no queden referencias
SELECT 
  'Verificando eliminaci√≥n completa...' as mensaje,
  COUNT(*) as tablas_restantes
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
  'transacciones_ventas_arriendos',
  'historico_estados_departamentos', 
  'comisiones_agentes',
  'leads_prospectos'
);

-- 2. Verificar que transacciones_departamentos tenga todos los campos necesarios
SELECT 
  'Verificando estructura de transacciones_departamentos...' as mensaje,
  column_name,
  data_type,
  is_nullable
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'transacciones_departamentos'
AND column_name IN ('estado_actual', 'datos_estado', 'fecha_ultimo_estado')
ORDER BY column_name;

-- 3. Crear √≠ndices optimizados para las consultas que antes usaban transacciones_ventas_arriendos
CREATE INDEX IF NOT EXISTS idx_transacciones_departamentos_estado_tipo 
ON transacciones_departamentos(estado_actual, tipo_transaccion);

CREATE INDEX IF NOT EXISTS idx_transacciones_departamentos_fecha_estado 
ON transacciones_departamentos(fecha_transaccion, estado_actual);

-- 4. Actualizar estad√≠sticas de la tabla
ANALYZE transacciones_departamentos;

-- 5. Mensaje de confirmaci√≥n
SELECT 'Migraci√≥n post-eliminaci√≥n completada exitosamente' as resultado;
`

  const migrationFile = 'scripts/post-elimination-migration.sql'
  if (writeFile(migrationFile, migrationContent)) {
    console.log(`   ‚úÖ Archivo de migraci√≥n creado: ${migrationFile}`)
    return true
  }
  
  return false
}

// Funci√≥n para actualizar documentaci√≥n
function updateDocumentation() {
  console.log('üìö Actualizando documentaci√≥n...')
  
  const changelogContent = `# CHANGELOG - Eliminaci√≥n de transacciones_ventas_arriendos

## Fecha: ${new Date().toISOString().split('T')[0]}

### üóëÔ∏è ELIMINACIONES REALIZADAS:

#### Tablas Eliminadas:
- ‚úÖ \`transacciones_ventas_arriendos\` - Tabla principal obsoleta
- ‚úÖ \`historico_estados_departamentos\` - Dependiente, no en uso
- ‚úÖ \`comisiones_agentes\` - Dependiente, no en uso  
- ‚úÖ \`leads_prospectos\` - Dependiente, no en uso

#### C√≥digo Actualizado:
- ‚úÖ \`/api/sales-rentals/stats\` - Ahora usa \`transacciones_departamentos\`
- ‚úÖ \`/api/sales-rentals/transactions/[id]\` - Eliminadas referencias obsoletas
- ‚úÖ \`/api/sales-rentals/transactions\` - Simplificada l√≥gica de tablas

### üéØ BENEFICIOS:

1. **Consistencia de Datos**: Una sola fuente de verdad
2. **Simplicidad**: Eliminada l√≥gica condicional compleja
3. **Rendimiento**: Menos verificaciones de tablas
4. **Mantenimiento**: C√≥digo m√°s limpio y f√°cil de mantener

### üìä IMPACTO:

- **Reportes**: No afectados (ya usaban \`transacciones_departamentos\`)
- **Estados**: No afectados (ya usaban \`transacciones_departamentos\`)
- **Estad√≠sticas**: Actualizadas para usar \`transacciones_departamentos\`
- **UI**: Sin cambios visibles para el usuario

### ‚ö†Ô∏è NOTAS IMPORTANTES:

- Las estad√≠sticas generales ahora usan \`precio_final\` en lugar de \`valor_transaccion\`
- El campo \`estado_actual\` es el est√°ndar para todos los estados
- Ya no existe l√≥gica de fallback entre tablas

---
Generado autom√°ticamente por: eliminate-transacciones-ventas-arriendos.js
`

  const changelogFile = 'scripts/ELIMINATION_CHANGELOG.md'
  if (writeFile(changelogFile, changelogContent)) {
    console.log(`   ‚úÖ Changelog creado: ${changelogFile}`)
    return true
  }
  
  return false
}

// Funci√≥n principal
async function updateCodeAfterElimination() {
  console.log('üîÑ SCRIPT DE ACTUALIZACI√ìN DE C√ìDIGO')
  console.log('=' .repeat(60))
  console.log('Prop√≥sito: Actualizar c√≥digo despu√©s de eliminar transacciones_ventas_arriendos')
  console.log('Fecha:', new Date().toLocaleString())
  console.log('=' .repeat(60))
  console.log('')

  const tasks = [
    { name: 'Verificar eliminaci√≥n del API de estad√≠sticas', func: verifyStatsAPIRemoval },
    { name: 'Actualizar API de transacciones individuales', func: updateTransactionAPI },
    { name: 'Actualizar API principal de transacciones', func: updateMainTransactionAPI },
    { name: 'Crear migraci√≥n SQL', func: createMigrationSQL },
    { name: 'Actualizar documentaci√≥n', func: updateDocumentation }
  ]

  let successCount = 0
  let totalTasks = tasks.length

  for (const task of tasks) {
    try {
      console.log(`üöÄ Ejecutando: ${task.name}`)
      const success = task.func()
      if (success) {
        successCount++
        console.log(`   ‚úÖ ${task.name} - COMPLETADO`)
      } else {
        console.log(`   ‚ùå ${task.name} - FALL√ì`)
      }
      console.log('')
    } catch (error) {
      console.log(`   ‚ùå Error en ${task.name}: ${error.message}`)
      console.log('')
    }
  }

  // Resumen final
  console.log('üìã RESUMEN DE ACTUALIZACI√ìN:')
  console.log(`   ‚úÖ Tareas completadas: ${successCount}/${totalTasks}`)
  console.log(`   üìä Tasa de √©xito: ${Math.round((successCount/totalTasks) * 100)}%`)
  console.log('')

  if (successCount === totalTasks) {
    console.log('üéâ ACTUALIZACI√ìN COMPLETADA EXITOSAMENTE!')
    console.log('')
    console.log('üìù PR√ìXIMOS PASOS:')
    console.log('   1. Ejecutar el script de eliminaci√≥n de base de datos')
    console.log('   2. Probar todas las funcionalidades del sistema')
    console.log('   3. Verificar que los reportes funcionan correctamente')
    console.log('   4. Hacer commit de los cambios')
  } else {
    console.log('‚ö†Ô∏è  ACTUALIZACI√ìN PARCIAL - Revisar errores arriba')
  }

  return successCount === totalTasks
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
  updateCodeAfterElimination()
    .then(success => {
      process.exit(success ? 0 : 1)
    })
    .catch(error => {
      console.error('‚ùå Error cr√≠tico:', error.message)
      process.exit(1)
    })
}

module.exports = { updateCodeAfterElimination }
